/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 4.0.1
 *
 * This file is not intended to be easily readable and contains a number of
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG
 * interface file instead.
 * ----------------------------------------------------------------------------- */


#ifndef SWIGJAVA
#define SWIGJAVA
#endif



#ifdef __cplusplus
/* SwigValueWrapper is described in swig.swg */
template<typename T> class SwigValueWrapper {
  struct SwigMovePointer {
    T *ptr;
    SwigMovePointer(T *p) : ptr(p) { }
    ~SwigMovePointer() { delete ptr; }
    SwigMovePointer& operator=(SwigMovePointer& rhs) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = rhs.ptr; rhs.ptr = 0; return *this; }
  } pointer;
  SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
  SwigValueWrapper(const SwigValueWrapper<T>& rhs);
public:
  SwigValueWrapper() : pointer(0) { }
  SwigValueWrapper& operator=(const T& t) { SwigMovePointer tmp(new T(t)); pointer = tmp; return *this; }
  operator T&() const { return *pointer.ptr; }
  T *operator&() { return pointer.ptr; }
};

template <typename T> T SwigValueInit() {
  return T();
}
#endif

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__))
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__))
# else
#   define SWIGUNUSED
# endif
#endif

#ifndef SWIG_MSC_UNSUPPRESS_4505
# if defined(_MSC_VER)
#   pragma warning(disable : 4505) /* unreferenced local function has been removed */
# endif
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if defined(__GNUC__)
#  if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#    ifndef GCC_HASCLASSVISIBILITY
#      define GCC_HASCLASSVISIBILITY
#    endif
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif

/* Deal with Apple's deprecated 'AssertMacros.h' from Carbon-framework */
#if defined(__APPLE__) && !defined(__ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES)
# define __ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES 0
#endif

/* Intel's compiler complains if a variable which was never initialised is
 * cast to void, which is a common idiom which we use to indicate that we
 * are aware a variable isn't used.  So we just silence that warning.
 * See: https://github.com/swig/swig/issues/192 for more discussion.
 */
#ifdef __INTEL_COMPILER
# pragma warning disable 592
#endif


/* Fix for jlong on some versions of gcc on Windows */
#if defined(__GNUC__) && !defined(__INTEL_COMPILER)
  typedef long long __int64;
#endif

/* Fix for jlong on 64-bit x86 Solaris */
#if defined(__x86_64)
# ifdef _LP64
#   undef _LP64
# endif
#endif

#include <jni.h>
#include <stdlib.h>
#include <string.h>


/* Support for throwing Java exceptions */
typedef enum {
  SWIG_JavaOutOfMemoryError = 1,
  SWIG_JavaIOException,
  SWIG_JavaRuntimeException,
  SWIG_JavaIndexOutOfBoundsException,
  SWIG_JavaArithmeticException,
  SWIG_JavaIllegalArgumentException,
  SWIG_JavaNullPointerException,
  SWIG_JavaDirectorPureVirtual,
  SWIG_JavaUnknownError,
  SWIG_JavaIllegalStateException,
} SWIG_JavaExceptionCodes;

typedef struct {
  SWIG_JavaExceptionCodes code;
  const char *java_exception;
} SWIG_JavaExceptions_t;


static void SWIGUNUSED SWIG_JavaThrowException(JNIEnv *jenv, SWIG_JavaExceptionCodes code, const char *msg) {
  jclass excep;
  static const SWIG_JavaExceptions_t java_exceptions[] = {
    { SWIG_JavaOutOfMemoryError, "java/lang/OutOfMemoryError" },
    { SWIG_JavaIOException, "java/io/IOException" },
    { SWIG_JavaRuntimeException, "java/lang/RuntimeException" },
    { SWIG_JavaIndexOutOfBoundsException, "java/lang/IndexOutOfBoundsException" },
    { SWIG_JavaArithmeticException, "java/lang/ArithmeticException" },
    { SWIG_JavaIllegalArgumentException, "java/lang/IllegalArgumentException" },
    { SWIG_JavaNullPointerException, "java/lang/NullPointerException" },
    { SWIG_JavaDirectorPureVirtual, "java/lang/RuntimeException" },
    { SWIG_JavaUnknownError,  "java/lang/UnknownError" },
    { SWIG_JavaIllegalStateException, "java/lang/IllegalStateException" },
    { (SWIG_JavaExceptionCodes)0,  "java/lang/UnknownError" }
  };
  const SWIG_JavaExceptions_t *except_ptr = java_exceptions;

  while (except_ptr->code != code && except_ptr->code)
    except_ptr++;

  jenv->ExceptionClear();
  excep = jenv->FindClass(except_ptr->java_exception);
  if (excep)
    jenv->ThrowNew(excep, msg);
}


/* Contract support */

#define SWIG_contract_assert(nullreturn, expr, msg) if (!(expr)) {SWIG_JavaThrowException(jenv, SWIG_JavaIllegalArgumentException, msg); return nullreturn; } else


#include <inttypes.h>


#include <stdint.h>		// Use the C99 official header


#define SWIGWORDSIZE64
#ifndef LONG_MAX
#include <limits.h>
#endif
#if (__WORDSIZE == 32) || (LONG_MAX == INT_MAX)
# error "SWIG wrapped code invalid in 32 bit architecture, regenerate code using -DSWIGWORDSIZE32"
#endif


#include <typeinfo>
#include <stdexcept>


#include <vector>
#include <stdexcept>


#include <string>


/* Check for overflow converting to Java int (always signed 32-bit) from (unsigned variable-bit) size_t */
SWIGINTERN jint SWIG_JavaIntFromSize_t(size_t size) {
  static const jint JINT_MAX = 0x7FFFFFFF;
  return (size > (size_t)JINT_MAX) ? -1 : (jint)size;
}


SWIGINTERN jint SWIG_VectorSize(size_t size) {
  jint sz = SWIG_JavaIntFromSize_t(size);
  if (sz == -1)
    throw std::out_of_range("vector size is too large to fit into a Java int");
  return sz;
}

SWIGINTERN std::vector< long long > *new_std_vector_Sl_long_SS_long_Sg___SWIG_2(jint count,long long const &value){
        if (count < 0)
          throw std::out_of_range("vector count must be positive");
        return new std::vector< long long >(static_cast<std::vector< long long >::size_type>(count), value);
      }
SWIGINTERN jint std_vector_Sl_long_SS_long_Sg__doSize(std::vector< long long > const *self){
        return SWIG_VectorSize(self->size());
      }
SWIGINTERN void std_vector_Sl_long_SS_long_Sg__doAdd__SWIG_0(std::vector< long long > *self,std::vector< long long >::value_type const &x){
        self->push_back(x);
      }
SWIGINTERN void std_vector_Sl_long_SS_long_Sg__doAdd__SWIG_1(std::vector< long long > *self,jint index,std::vector< long long >::value_type const &x){
        jint size = static_cast<jint>(self->size());
        if (0 <= index && index <= size) {
          self->insert(self->begin() + index, x);
        } else {
          throw std::out_of_range("vector index out of range");
        }
      }
SWIGINTERN std::vector< long long >::value_type std_vector_Sl_long_SS_long_Sg__doRemove(std::vector< long long > *self,jint index){
        jint size = static_cast<jint>(self->size());
        if (0 <= index && index < size) {
          long long const old_value = (*self)[index];
          self->erase(self->begin() + index);
          return old_value;
        } else {
          throw std::out_of_range("vector index out of range");
        }
      }
SWIGINTERN std::vector< long long >::value_type const &std_vector_Sl_long_SS_long_Sg__doGet(std::vector< long long > *self,jint index){
        jint size = static_cast<jint>(self->size());
        if (index >= 0 && index < size)
          return (*self)[index];
        else
          throw std::out_of_range("vector index out of range");
      }
SWIGINTERN std::vector< long long >::value_type std_vector_Sl_long_SS_long_Sg__doSet(std::vector< long long > *self,jint index,std::vector< long long >::value_type const &val){
        jint size = static_cast<jint>(self->size());
        if (index >= 0 && index < size) {
          long long const old_value = (*self)[index];
          (*self)[index] = val;
          return old_value;
        }
        else
          throw std::out_of_range("vector index out of range");
      }
SWIGINTERN void std_vector_Sl_long_SS_long_Sg__doRemoveRange(std::vector< long long > *self,jint fromIndex,jint toIndex){
        jint size = static_cast<jint>(self->size());
        if (0 <= fromIndex && fromIndex <= toIndex && toIndex <= size) {
          self->erase(self->begin() + fromIndex, self->begin() + toIndex);
        } else {
          throw std::out_of_range("vector index out of range");
        }
      }
SWIGINTERN std::vector< std::vector< long long > > *new_std_vector_Sl_std_vector_Sl_long_SS_long_Sg__Sg___SWIG_2(jint count,std::vector< long long > const &value){
        if (count < 0)
          throw std::out_of_range("vector count must be positive");
        return new std::vector< std::vector< long long > >(static_cast<std::vector< std::vector< long long > >::size_type>(count), value);
      }
SWIGINTERN jint std_vector_Sl_std_vector_Sl_long_SS_long_Sg__Sg__doSize(std::vector< std::vector< long long > > const *self){
        return SWIG_VectorSize(self->size());
      }
SWIGINTERN void std_vector_Sl_std_vector_Sl_long_SS_long_Sg__Sg__doAdd__SWIG_0(std::vector< std::vector< long long > > *self,std::vector< std::vector< long long > >::value_type const &x){
        self->push_back(x);
      }
SWIGINTERN void std_vector_Sl_std_vector_Sl_long_SS_long_Sg__Sg__doAdd__SWIG_1(std::vector< std::vector< long long > > *self,jint index,std::vector< std::vector< long long > >::value_type const &x){
        jint size = static_cast<jint>(self->size());
        if (0 <= index && index <= size) {
          self->insert(self->begin() + index, x);
        } else {
          throw std::out_of_range("vector index out of range");
        }
      }
SWIGINTERN std::vector< std::vector< long long > >::value_type std_vector_Sl_std_vector_Sl_long_SS_long_Sg__Sg__doRemove(std::vector< std::vector< long long > > *self,jint index){
        jint size = static_cast<jint>(self->size());
        if (0 <= index && index < size) {
          std::vector< long long > const old_value = (*self)[index];
          self->erase(self->begin() + index);
          return old_value;
        } else {
          throw std::out_of_range("vector index out of range");
        }
      }
SWIGINTERN std::vector< std::vector< long long > >::value_type const &std_vector_Sl_std_vector_Sl_long_SS_long_Sg__Sg__doGet(std::vector< std::vector< long long > > *self,jint index){
        jint size = static_cast<jint>(self->size());
        if (index >= 0 && index < size)
          return (*self)[index];
        else
          throw std::out_of_range("vector index out of range");
      }
SWIGINTERN std::vector< std::vector< long long > >::value_type std_vector_Sl_std_vector_Sl_long_SS_long_Sg__Sg__doSet(std::vector< std::vector< long long > > *self,jint index,std::vector< std::vector< long long > >::value_type const &val){
        jint size = static_cast<jint>(self->size());
        if (index >= 0 && index < size) {
          std::vector< long long > const old_value = (*self)[index];
          (*self)[index] = val;
          return old_value;
        }
        else
          throw std::out_of_range("vector index out of range");
      }
SWIGINTERN void std_vector_Sl_std_vector_Sl_long_SS_long_Sg__Sg__doRemoveRange(std::vector< std::vector< long long > > *self,jint fromIndex,jint toIndex){
        jint size = static_cast<jint>(self->size());
        if (0 <= fromIndex && fromIndex <= toIndex && toIndex <= size) {
          self->erase(self->begin() + fromIndex, self->begin() + toIndex);
        } else {
          throw std::out_of_range("vector index out of range");
        }
      }
SWIGINTERN std::vector< std::string > *new_std_vector_Sl_std_string_Sg___SWIG_2(jint count,std::string const &value){
        if (count < 0)
          throw std::out_of_range("vector count must be positive");
        return new std::vector< std::string >(static_cast<std::vector< std::string >::size_type>(count), value);
      }
SWIGINTERN jint std_vector_Sl_std_string_Sg__doSize(std::vector< std::string > const *self){
        return SWIG_VectorSize(self->size());
      }
SWIGINTERN void std_vector_Sl_std_string_Sg__doAdd__SWIG_0(std::vector< std::string > *self,std::vector< std::string >::value_type const &x){
        self->push_back(x);
      }
SWIGINTERN void std_vector_Sl_std_string_Sg__doAdd__SWIG_1(std::vector< std::string > *self,jint index,std::vector< std::string >::value_type const &x){
        jint size = static_cast<jint>(self->size());
        if (0 <= index && index <= size) {
          self->insert(self->begin() + index, x);
        } else {
          throw std::out_of_range("vector index out of range");
        }
      }
SWIGINTERN std::vector< std::string >::value_type std_vector_Sl_std_string_Sg__doRemove(std::vector< std::string > *self,jint index){
        jint size = static_cast<jint>(self->size());
        if (0 <= index && index < size) {
          std::string const old_value = (*self)[index];
          self->erase(self->begin() + index);
          return old_value;
        } else {
          throw std::out_of_range("vector index out of range");
        }
      }
SWIGINTERN std::vector< std::string >::value_type const &std_vector_Sl_std_string_Sg__doGet(std::vector< std::string > *self,jint index){
        jint size = static_cast<jint>(self->size());
        if (index >= 0 && index < size)
          return (*self)[index];
        else
          throw std::out_of_range("vector index out of range");
      }
SWIGINTERN std::vector< std::string >::value_type std_vector_Sl_std_string_Sg__doSet(std::vector< std::string > *self,jint index,std::vector< std::string >::value_type const &val){
        jint size = static_cast<jint>(self->size());
        if (index >= 0 && index < size) {
          std::string const old_value = (*self)[index];
          (*self)[index] = val;
          return old_value;
        }
        else
          throw std::out_of_range("vector index out of range");
      }
SWIGINTERN void std_vector_Sl_std_string_Sg__doRemoveRange(std::vector< std::string > *self,jint fromIndex,jint toIndex){
        jint size = static_cast<jint>(self->size());
        if (0 <= fromIndex && fromIndex <= toIndex && toIndex <= size) {
          self->erase(self->begin() + fromIndex, self->begin() + toIndex);
        } else {
          throw std::out_of_range("vector index out of range");
        }
      }

#include "../ClangClog.h"


#ifdef __cplusplus
extern "C" {
#endif

SWIGEXPORT void JNICALL Java_clang_swig_clogJNI_imaxdiv_1t_1quot_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  imaxdiv_t *arg1 = (imaxdiv_t *) 0 ;
  long arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(imaxdiv_t **)&jarg1; 
  arg2 = (long)jarg2; 
  if (arg1) (arg1)->quot = arg2;
}


SWIGEXPORT jint JNICALL Java_clang_swig_clogJNI_imaxdiv_1t_1quot_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  imaxdiv_t *arg1 = (imaxdiv_t *) 0 ;
  long result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(imaxdiv_t **)&jarg1; 
  result = (long) ((arg1)->quot);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_clang_swig_clogJNI_imaxdiv_1t_1rem_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  imaxdiv_t *arg1 = (imaxdiv_t *) 0 ;
  long arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(imaxdiv_t **)&jarg1; 
  arg2 = (long)jarg2; 
  if (arg1) (arg1)->rem = arg2;
}


SWIGEXPORT jint JNICALL Java_clang_swig_clogJNI_imaxdiv_1t_1rem_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  imaxdiv_t *arg1 = (imaxdiv_t *) 0 ;
  long result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(imaxdiv_t **)&jarg1; 
  result = (long) ((arg1)->rem);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_clang_swig_clogJNI_new_1imaxdiv_1t(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  imaxdiv_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (imaxdiv_t *)new imaxdiv_t();
  *(imaxdiv_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_clang_swig_clogJNI_delete_1imaxdiv_1t(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  imaxdiv_t *arg1 = (imaxdiv_t *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(imaxdiv_t **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jint JNICALL Java_clang_swig_clogJNI_imaxabs(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jint jresult = 0 ;
  intmax_t arg1 ;
  intmax_t result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (intmax_t)jarg1; 
  result = (intmax_t)imaxabs(arg1);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_clang_swig_clogJNI_imaxdiv(JNIEnv *jenv, jclass jcls, jint jarg1, jint jarg2) {
  jlong jresult = 0 ;
  intmax_t arg1 ;
  intmax_t arg2 ;
  imaxdiv_t result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (intmax_t)jarg1; 
  arg2 = (intmax_t)jarg2; 
  result = imaxdiv(arg1,arg2);
  *(imaxdiv_t **)&jresult = new imaxdiv_t((const imaxdiv_t &)result); 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_clang_swig_clogJNI_strtoimax(JNIEnv *jenv, jclass jcls, jstring jarg1, jlong jarg2, jint jarg3) {
  jint jresult = 0 ;
  char *arg1 = (char *) 0 ;
  char **arg2 = (char **) 0 ;
  int arg3 ;
  intmax_t result;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  arg2 = *(char ***)&jarg2; 
  arg3 = (int)jarg3; 
  result = (intmax_t)strtoimax((char const *)arg1,arg2,arg3);
  jresult = (jint)result; 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_clang_swig_clogJNI_strtoumax(JNIEnv *jenv, jclass jcls, jstring jarg1, jlong jarg2, jint jarg3) {
  jlong jresult = 0 ;
  char *arg1 = (char *) 0 ;
  char **arg2 = (char **) 0 ;
  int arg3 ;
  uintmax_t result;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  arg2 = *(char ***)&jarg2; 
  arg3 = (int)jarg3; 
  result = (uintmax_t)strtoumax((char const *)arg1,arg2,arg3);
  jresult = (jlong)result; 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_clang_swig_clogJNI_new_1VectorLong_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::vector< long long > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (std::vector< long long > *)new std::vector< long long >();
  *(std::vector< long long > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_clang_swig_clogJNI_new_1VectorLong_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< long long > *arg1 = 0 ;
  std::vector< long long > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< long long > **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< long long > const & reference is null");
    return 0;
  } 
  result = (std::vector< long long > *)new std::vector< long long >((std::vector< long long > const &)*arg1);
  *(std::vector< long long > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_clang_swig_clogJNI_VectorLong_1capacity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< long long > *arg1 = (std::vector< long long > *) 0 ;
  std::vector< long long >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< long long > **)&jarg1; 
  result = ((std::vector< long long > const *)arg1)->capacity();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_clang_swig_clogJNI_VectorLong_1reserve(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  std::vector< long long > *arg1 = (std::vector< long long > *) 0 ;
  std::vector< long long >::size_type arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< long long > **)&jarg1; 
  arg2 = (std::vector< long long >::size_type)jarg2; 
  try {
    (arg1)->reserve(arg2);
  } catch(std::length_error &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return ;
  }
}


SWIGEXPORT jboolean JNICALL Java_clang_swig_clogJNI_VectorLong_1isEmpty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  std::vector< long long > *arg1 = (std::vector< long long > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< long long > **)&jarg1; 
  result = (bool)((std::vector< long long > const *)arg1)->empty();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_clang_swig_clogJNI_VectorLong_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  std::vector< long long > *arg1 = (std::vector< long long > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< long long > **)&jarg1; 
  (arg1)->clear();
}


SWIGEXPORT jlong JNICALL Java_clang_swig_clogJNI_new_1VectorLong_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jint jarg1, jlong jarg2) {
  jlong jresult = 0 ;
  jint arg1 ;
  long long *arg2 = 0 ;
  long long temp2 ;
  std::vector< long long > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = jarg1; 
  temp2 = (long long)jarg2; 
  arg2 = &temp2; 
  try {
    result = (std::vector< long long > *)new_std_vector_Sl_long_SS_long_Sg___SWIG_2(arg1,(long long const &)*arg2);
  } catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  *(std::vector< long long > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_clang_swig_clogJNI_VectorLong_1doSize(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  std::vector< long long > *arg1 = (std::vector< long long > *) 0 ;
  jint result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< long long > **)&jarg1; 
  try {
    result = std_vector_Sl_long_SS_long_Sg__doSize((std::vector< long long > const *)arg1);
  } catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_clang_swig_clogJNI_VectorLong_1doAdd_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  std::vector< long long > *arg1 = (std::vector< long long > *) 0 ;
  std::vector< long long >::value_type *arg2 = 0 ;
  std::vector< long long >::value_type temp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< long long > **)&jarg1; 
  temp2 = (std::vector< long long >::value_type)jarg2; 
  arg2 = &temp2; 
  std_vector_Sl_long_SS_long_Sg__doAdd__SWIG_0(arg1,(long long const &)*arg2);
}


SWIGEXPORT void JNICALL Java_clang_swig_clogJNI_VectorLong_1doAdd_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3) {
  std::vector< long long > *arg1 = (std::vector< long long > *) 0 ;
  jint arg2 ;
  std::vector< long long >::value_type *arg3 = 0 ;
  std::vector< long long >::value_type temp3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< long long > **)&jarg1; 
  arg2 = jarg2; 
  temp3 = (std::vector< long long >::value_type)jarg3; 
  arg3 = &temp3; 
  try {
    std_vector_Sl_long_SS_long_Sg__doAdd__SWIG_1(arg1,arg2,(long long const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return ;
  }
}


SWIGEXPORT jlong JNICALL Java_clang_swig_clogJNI_VectorLong_1doRemove(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  std::vector< long long > *arg1 = (std::vector< long long > *) 0 ;
  jint arg2 ;
  std::vector< long long >::value_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< long long > **)&jarg1; 
  arg2 = jarg2; 
  try {
    result = (std::vector< long long >::value_type)std_vector_Sl_long_SS_long_Sg__doRemove(arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_clang_swig_clogJNI_VectorLong_1doGet(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  std::vector< long long > *arg1 = (std::vector< long long > *) 0 ;
  jint arg2 ;
  std::vector< long long >::value_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< long long > **)&jarg1; 
  arg2 = jarg2; 
  try {
    result = (std::vector< long long >::value_type *) &std_vector_Sl_long_SS_long_Sg__doGet(arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  jresult = (jlong)*result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_clang_swig_clogJNI_VectorLong_1doSet(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3) {
  jlong jresult = 0 ;
  std::vector< long long > *arg1 = (std::vector< long long > *) 0 ;
  jint arg2 ;
  std::vector< long long >::value_type *arg3 = 0 ;
  std::vector< long long >::value_type temp3 ;
  std::vector< long long >::value_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< long long > **)&jarg1; 
  arg2 = jarg2; 
  temp3 = (std::vector< long long >::value_type)jarg3; 
  arg3 = &temp3; 
  try {
    result = (std::vector< long long >::value_type)std_vector_Sl_long_SS_long_Sg__doSet(arg1,arg2,(long long const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_clang_swig_clogJNI_VectorLong_1doRemoveRange(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3) {
  std::vector< long long > *arg1 = (std::vector< long long > *) 0 ;
  jint arg2 ;
  jint arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< long long > **)&jarg1; 
  arg2 = jarg2; 
  arg3 = jarg3; 
  try {
    std_vector_Sl_long_SS_long_Sg__doRemoveRange(arg1,arg2,arg3);
  } catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return ;
  }
}


SWIGEXPORT void JNICALL Java_clang_swig_clogJNI_delete_1VectorLong(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::vector< long long > *arg1 = (std::vector< long long > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::vector< long long > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_clang_swig_clogJNI_new_1VectorVectorLong_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::vector< std::vector< long long > > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (std::vector< std::vector< long long > > *)new std::vector< std::vector< long long > >();
  *(std::vector< std::vector< long long > > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_clang_swig_clogJNI_new_1VectorVectorLong_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< std::vector< long long > > *arg1 = 0 ;
  std::vector< std::vector< long long > > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::vector< long long > > **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< std::vector< long long > > const & reference is null");
    return 0;
  } 
  result = (std::vector< std::vector< long long > > *)new std::vector< std::vector< long long > >((std::vector< std::vector< long long > > const &)*arg1);
  *(std::vector< std::vector< long long > > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_clang_swig_clogJNI_VectorVectorLong_1capacity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< std::vector< long long > > *arg1 = (std::vector< std::vector< long long > > *) 0 ;
  std::vector< std::vector< long long > >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::vector< long long > > **)&jarg1; 
  result = ((std::vector< std::vector< long long > > const *)arg1)->capacity();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_clang_swig_clogJNI_VectorVectorLong_1reserve(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  std::vector< std::vector< long long > > *arg1 = (std::vector< std::vector< long long > > *) 0 ;
  std::vector< std::vector< long long > >::size_type arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::vector< long long > > **)&jarg1; 
  arg2 = (std::vector< std::vector< long long > >::size_type)jarg2; 
  try {
    (arg1)->reserve(arg2);
  } catch(std::length_error &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return ;
  }
}


SWIGEXPORT jboolean JNICALL Java_clang_swig_clogJNI_VectorVectorLong_1isEmpty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  std::vector< std::vector< long long > > *arg1 = (std::vector< std::vector< long long > > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::vector< long long > > **)&jarg1; 
  result = (bool)((std::vector< std::vector< long long > > const *)arg1)->empty();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_clang_swig_clogJNI_VectorVectorLong_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  std::vector< std::vector< long long > > *arg1 = (std::vector< std::vector< long long > > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::vector< long long > > **)&jarg1; 
  (arg1)->clear();
}


SWIGEXPORT jlong JNICALL Java_clang_swig_clogJNI_new_1VectorVectorLong_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jint jarg1, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  jint arg1 ;
  std::vector< long long > *arg2 = 0 ;
  std::vector< std::vector< long long > > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg2_;
  arg1 = jarg1; 
  arg2 = *(std::vector< long long > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< long long > const & reference is null");
    return 0;
  } 
  try {
    result = (std::vector< std::vector< long long > > *)new_std_vector_Sl_std_vector_Sl_long_SS_long_Sg__Sg___SWIG_2(arg1,(std::vector< long long > const &)*arg2);
  } catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  *(std::vector< std::vector< long long > > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_clang_swig_clogJNI_VectorVectorLong_1doSize(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  std::vector< std::vector< long long > > *arg1 = (std::vector< std::vector< long long > > *) 0 ;
  jint result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::vector< long long > > **)&jarg1; 
  try {
    result = std_vector_Sl_std_vector_Sl_long_SS_long_Sg__Sg__doSize((std::vector< std::vector< long long > > const *)arg1);
  } catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_clang_swig_clogJNI_VectorVectorLong_1doAdd_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  std::vector< std::vector< long long > > *arg1 = (std::vector< std::vector< long long > > *) 0 ;
  std::vector< std::vector< long long > >::value_type *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(std::vector< std::vector< long long > > **)&jarg1; 
  arg2 = *(std::vector< std::vector< long long > >::value_type **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< std::vector< long long > >::value_type const & reference is null");
    return ;
  } 
  std_vector_Sl_std_vector_Sl_long_SS_long_Sg__Sg__doAdd__SWIG_0(arg1,(std::vector< long long > const &)*arg2);
}


SWIGEXPORT void JNICALL Java_clang_swig_clogJNI_VectorVectorLong_1doAdd_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_) {
  std::vector< std::vector< long long > > *arg1 = (std::vector< std::vector< long long > > *) 0 ;
  jint arg2 ;
  std::vector< std::vector< long long > >::value_type *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(std::vector< std::vector< long long > > **)&jarg1; 
  arg2 = jarg2; 
  arg3 = *(std::vector< std::vector< long long > >::value_type **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< std::vector< long long > >::value_type const & reference is null");
    return ;
  } 
  try {
    std_vector_Sl_std_vector_Sl_long_SS_long_Sg__Sg__doAdd__SWIG_1(arg1,arg2,(std::vector< long long > const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return ;
  }
}


SWIGEXPORT jlong JNICALL Java_clang_swig_clogJNI_VectorVectorLong_1doRemove(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  std::vector< std::vector< long long > > *arg1 = (std::vector< std::vector< long long > > *) 0 ;
  jint arg2 ;
  std::vector< std::vector< long long > >::value_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::vector< long long > > **)&jarg1; 
  arg2 = jarg2; 
  try {
    result = std_vector_Sl_std_vector_Sl_long_SS_long_Sg__Sg__doRemove(arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  *(std::vector< std::vector< long long > >::value_type **)&jresult = new std::vector< std::vector< long long > >::value_type((const std::vector< std::vector< long long > >::value_type &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_clang_swig_clogJNI_VectorVectorLong_1doGet(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  std::vector< std::vector< long long > > *arg1 = (std::vector< std::vector< long long > > *) 0 ;
  jint arg2 ;
  std::vector< std::vector< long long > >::value_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::vector< long long > > **)&jarg1; 
  arg2 = jarg2; 
  try {
    result = (std::vector< std::vector< long long > >::value_type *) &std_vector_Sl_std_vector_Sl_long_SS_long_Sg__Sg__doGet(arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  *(std::vector< std::vector< long long > >::value_type **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_clang_swig_clogJNI_VectorVectorLong_1doSet(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_) {
  jlong jresult = 0 ;
  std::vector< std::vector< long long > > *arg1 = (std::vector< std::vector< long long > > *) 0 ;
  jint arg2 ;
  std::vector< std::vector< long long > >::value_type *arg3 = 0 ;
  std::vector< std::vector< long long > >::value_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(std::vector< std::vector< long long > > **)&jarg1; 
  arg2 = jarg2; 
  arg3 = *(std::vector< std::vector< long long > >::value_type **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< std::vector< long long > >::value_type const & reference is null");
    return 0;
  } 
  try {
    result = std_vector_Sl_std_vector_Sl_long_SS_long_Sg__Sg__doSet(arg1,arg2,(std::vector< long long > const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  *(std::vector< std::vector< long long > >::value_type **)&jresult = new std::vector< std::vector< long long > >::value_type((const std::vector< std::vector< long long > >::value_type &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_clang_swig_clogJNI_VectorVectorLong_1doRemoveRange(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3) {
  std::vector< std::vector< long long > > *arg1 = (std::vector< std::vector< long long > > *) 0 ;
  jint arg2 ;
  jint arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::vector< long long > > **)&jarg1; 
  arg2 = jarg2; 
  arg3 = jarg3; 
  try {
    std_vector_Sl_std_vector_Sl_long_SS_long_Sg__Sg__doRemoveRange(arg1,arg2,arg3);
  } catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return ;
  }
}


SWIGEXPORT void JNICALL Java_clang_swig_clogJNI_delete_1VectorVectorLong(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::vector< std::vector< long long > > *arg1 = (std::vector< std::vector< long long > > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::vector< std::vector< long long > > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_clang_swig_clogJNI_new_1VectorString_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::vector< std::string > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (std::vector< std::string > *)new std::vector< std::string >();
  *(std::vector< std::string > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_clang_swig_clogJNI_new_1VectorString_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< std::string > *arg1 = 0 ;
  std::vector< std::string > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::string > **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< std::string > const & reference is null");
    return 0;
  } 
  result = (std::vector< std::string > *)new std::vector< std::string >((std::vector< std::string > const &)*arg1);
  *(std::vector< std::string > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_clang_swig_clogJNI_VectorString_1capacity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  std::vector< std::string >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::string > **)&jarg1; 
  result = ((std::vector< std::string > const *)arg1)->capacity();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_clang_swig_clogJNI_VectorString_1reserve(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  std::vector< std::string >::size_type arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::string > **)&jarg1; 
  arg2 = (std::vector< std::string >::size_type)jarg2; 
  try {
    (arg1)->reserve(arg2);
  } catch(std::length_error &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return ;
  }
}


SWIGEXPORT jboolean JNICALL Java_clang_swig_clogJNI_VectorString_1isEmpty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::string > **)&jarg1; 
  result = (bool)((std::vector< std::string > const *)arg1)->empty();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_clang_swig_clogJNI_VectorString_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::string > **)&jarg1; 
  (arg1)->clear();
}


SWIGEXPORT jlong JNICALL Java_clang_swig_clogJNI_new_1VectorString_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jint jarg1, jstring jarg2) {
  jlong jresult = 0 ;
  jint arg1 ;
  std::string *arg2 = 0 ;
  std::vector< std::string > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  try {
    result = (std::vector< std::string > *)new_std_vector_Sl_std_string_Sg___SWIG_2(arg1,(std::string const &)*arg2);
  } catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  *(std::vector< std::string > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_clang_swig_clogJNI_VectorString_1doSize(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  jint result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::string > **)&jarg1; 
  try {
    result = std_vector_Sl_std_string_Sg__doSize((std::vector< std::string > const *)arg1);
  } catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_clang_swig_clogJNI_VectorString_1doAdd_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  std::vector< std::string >::value_type *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::string > **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::vector< std::string >::value_type arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  std_vector_Sl_std_string_Sg__doAdd__SWIG_0(arg1,(std::string const &)*arg2);
}


SWIGEXPORT void JNICALL Java_clang_swig_clogJNI_VectorString_1doAdd_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jstring jarg3) {
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  jint arg2 ;
  std::vector< std::string >::value_type *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::string > **)&jarg1; 
  arg2 = jarg2; 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return ;
  std::vector< std::string >::value_type arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  try {
    std_vector_Sl_std_string_Sg__doAdd__SWIG_1(arg1,arg2,(std::string const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return ;
  }
}


SWIGEXPORT jstring JNICALL Java_clang_swig_clogJNI_VectorString_1doRemove(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jstring jresult = 0 ;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  jint arg2 ;
  std::vector< std::string >::value_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::string > **)&jarg1; 
  arg2 = jarg2; 
  try {
    result = std_vector_Sl_std_string_Sg__doRemove(arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_clang_swig_clogJNI_VectorString_1doGet(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jstring jresult = 0 ;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  jint arg2 ;
  std::vector< std::string >::value_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::string > **)&jarg1; 
  arg2 = jarg2; 
  try {
    result = (std::vector< std::string >::value_type *) &std_vector_Sl_std_string_Sg__doGet(arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_clang_swig_clogJNI_VectorString_1doSet(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jstring jarg3) {
  jstring jresult = 0 ;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  jint arg2 ;
  std::vector< std::string >::value_type *arg3 = 0 ;
  std::vector< std::string >::value_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::string > **)&jarg1; 
  arg2 = jarg2; 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return 0;
  std::vector< std::string >::value_type arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  try {
    result = std_vector_Sl_std_string_Sg__doSet(arg1,arg2,(std::string const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_clang_swig_clogJNI_VectorString_1doRemoveRange(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3) {
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  jint arg2 ;
  jint arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::string > **)&jarg1; 
  arg2 = jarg2; 
  arg3 = jarg3; 
  try {
    std_vector_Sl_std_string_Sg__doRemoveRange(arg1,arg2,arg3);
  } catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return ;
  }
}


SWIGEXPORT void JNICALL Java_clang_swig_clogJNI_delete_1VectorString(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::vector< std::string > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_clang_swig_clogJNI_ClangClog_1Loc_1Filename_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  clang::clog::ClangClog::Loc *arg1 = (clang::clog::ClangClog::Loc *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(clang::clog::ClangClog::Loc **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if (arg1) (arg1)->Filename = *arg2;
}


SWIGEXPORT jstring JNICALL Java_clang_swig_clogJNI_ClangClog_1Loc_1Filename_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  clang::clog::ClangClog::Loc *arg1 = (clang::clog::ClangClog::Loc *) 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(clang::clog::ClangClog::Loc **)&jarg1; 
  result = (std::string *) & ((arg1)->Filename);
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_clang_swig_clogJNI_ClangClog_1Loc_1StartLine_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  clang::clog::ClangClog::Loc *arg1 = (clang::clog::ClangClog::Loc *) 0 ;
  clang::clog::i64 arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(clang::clog::ClangClog::Loc **)&jarg1; 
  arg2 = (clang::clog::i64)jarg2; 
  if (arg1) (arg1)->StartLine = arg2;
}


SWIGEXPORT jlong JNICALL Java_clang_swig_clogJNI_ClangClog_1Loc_1StartLine_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  clang::clog::ClangClog::Loc *arg1 = (clang::clog::ClangClog::Loc *) 0 ;
  clang::clog::i64 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(clang::clog::ClangClog::Loc **)&jarg1; 
  result = (clang::clog::i64) ((arg1)->StartLine);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_clang_swig_clogJNI_ClangClog_1Loc_1StartCol_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  clang::clog::ClangClog::Loc *arg1 = (clang::clog::ClangClog::Loc *) 0 ;
  clang::clog::i64 arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(clang::clog::ClangClog::Loc **)&jarg1; 
  arg2 = (clang::clog::i64)jarg2; 
  if (arg1) (arg1)->StartCol = arg2;
}


SWIGEXPORT jlong JNICALL Java_clang_swig_clogJNI_ClangClog_1Loc_1StartCol_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  clang::clog::ClangClog::Loc *arg1 = (clang::clog::ClangClog::Loc *) 0 ;
  clang::clog::i64 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(clang::clog::ClangClog::Loc **)&jarg1; 
  result = (clang::clog::i64) ((arg1)->StartCol);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_clang_swig_clogJNI_ClangClog_1Loc_1EndLine_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  clang::clog::ClangClog::Loc *arg1 = (clang::clog::ClangClog::Loc *) 0 ;
  clang::clog::i64 arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(clang::clog::ClangClog::Loc **)&jarg1; 
  arg2 = (clang::clog::i64)jarg2; 
  if (arg1) (arg1)->EndLine = arg2;
}


SWIGEXPORT jlong JNICALL Java_clang_swig_clogJNI_ClangClog_1Loc_1EndLine_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  clang::clog::ClangClog::Loc *arg1 = (clang::clog::ClangClog::Loc *) 0 ;
  clang::clog::i64 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(clang::clog::ClangClog::Loc **)&jarg1; 
  result = (clang::clog::i64) ((arg1)->EndLine);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_clang_swig_clogJNI_ClangClog_1Loc_1EndCol_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  clang::clog::ClangClog::Loc *arg1 = (clang::clog::ClangClog::Loc *) 0 ;
  clang::clog::i64 arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(clang::clog::ClangClog::Loc **)&jarg1; 
  arg2 = (clang::clog::i64)jarg2; 
  if (arg1) (arg1)->EndCol = arg2;
}


SWIGEXPORT jlong JNICALL Java_clang_swig_clogJNI_ClangClog_1Loc_1EndCol_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  clang::clog::ClangClog::Loc *arg1 = (clang::clog::ClangClog::Loc *) 0 ;
  clang::clog::i64 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(clang::clog::ClangClog::Loc **)&jarg1; 
  result = (clang::clog::i64) ((arg1)->EndCol);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_clang_swig_clogJNI_new_1ClangClog_1Loc_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  clang::clog::ClangClog::Loc *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (clang::clog::ClangClog::Loc *)new clang::clog::ClangClog::Loc();
  *(clang::clog::ClangClog::Loc **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_clang_swig_clogJNI_new_1ClangClog_1Loc_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jstring jarg1, jlong jarg2, jlong jarg3, jlong jarg4, jlong jarg5) {
  jlong jresult = 0 ;
  std::string *arg1 = 0 ;
  clang::clog::i64 arg2 ;
  clang::clog::i64 arg3 ;
  clang::clog::i64 arg4 ;
  clang::clog::i64 arg5 ;
  clang::clog::ClangClog::Loc *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  arg2 = (clang::clog::i64)jarg2; 
  arg3 = (clang::clog::i64)jarg3; 
  arg4 = (clang::clog::i64)jarg4; 
  arg5 = (clang::clog::i64)jarg5; 
  result = (clang::clog::ClangClog::Loc *)new clang::clog::ClangClog::Loc((std::string const &)*arg1,arg2,arg3,arg4,arg5);
  *(clang::clog::ClangClog::Loc **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_clang_swig_clogJNI_delete_1ClangClog_1Loc(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  clang::clog::ClangClog::Loc *arg1 = (clang::clog::ClangClog::Loc *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(clang::clog::ClangClog::Loc **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_clang_swig_clogJNI_new_1ClangClog(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  clang::tooling::CompilationDatabase *arg1 = 0 ;
  std::vector< std::string > *arg2 = 0 ;
  clang::clog::ClangClog *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg2_;
  arg1 = *(clang::tooling::CompilationDatabase **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "clang::tooling::CompilationDatabase const & reference is null");
    return 0;
  } 
  arg2 = *(std::vector< std::string > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< std::string > const & reference is null");
    return 0;
  } 
  result = (clang::clog::ClangClog *)new clang::clog::ClangClog((clang::tooling::CompilationDatabase const &)*arg1,(std::vector< std::string > const &)*arg2);
  *(clang::clog::ClangClog **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_clang_swig_clogJNI_ClangClog_1init(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  clang::clog::ClangClog *arg1 = (clang::clog::ClangClog *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(clang::clog::ClangClog **)&jarg1; 
  result = (bool)(arg1)->init();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_clang_swig_clogJNI_ClangClog_1registerMatcher(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jboolean jarg3) {
  jlong jresult = 0 ;
  clang::clog::ClangClog *arg1 = (clang::clog::ClangClog *) 0 ;
  std::string *arg2 = 0 ;
  bool arg3 ;
  clang::clog::i64 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(clang::clog::ClangClog **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = jarg3 ? true : false; 
  result = (clang::clog::i64)(arg1)->registerMatcher((std::string const &)*arg2,arg3);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_clang_swig_clogJNI_ClangClog_1runGlobalMatchers(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  clang::clog::ClangClog *arg1 = (clang::clog::ClangClog *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(clang::clog::ClangClog **)&jarg1; 
  (arg1)->runGlobalMatchers();
}


SWIGEXPORT jlong JNICALL Java_clang_swig_clogJNI_ClangClog_1matchFromRoot(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  clang::clog::ClangClog *arg1 = (clang::clog::ClangClog *) 0 ;
  clang::clog::i64 arg2 ;
  std::vector< std::vector< clang::clog::i64 > > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(clang::clog::ClangClog **)&jarg1; 
  arg2 = (clang::clog::i64)jarg2; 
  result = (arg1)->matchFromRoot(arg2);
  *(std::vector< std::vector< clang::clog::i64 > > **)&jresult = new std::vector< std::vector< clang::clog::i64 > >((const std::vector< std::vector< clang::clog::i64 > > &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_clang_swig_clogJNI_ClangClog_1matchFromNode(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3) {
  jlong jresult = 0 ;
  clang::clog::ClangClog *arg1 = (clang::clog::ClangClog *) 0 ;
  clang::clog::i64 arg2 ;
  clang::clog::i64 arg3 ;
  std::vector< std::vector< clang::clog::i64 > > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(clang::clog::ClangClog **)&jarg1; 
  arg2 = (clang::clog::i64)jarg2; 
  arg3 = (clang::clog::i64)jarg3; 
  result = (arg1)->matchFromNode(arg2,arg3);
  *(std::vector< std::vector< clang::clog::i64 > > **)&jresult = new std::vector< std::vector< clang::clog::i64 > >((const std::vector< std::vector< clang::clog::i64 > > &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_clang_swig_clogJNI_ClangClog_1srcLocation(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  clang::clog::ClangClog *arg1 = (clang::clog::ClangClog *) 0 ;
  clang::clog::i64 arg2 ;
  clang::clog::ClangClog::Loc result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(clang::clog::ClangClog **)&jarg1; 
  arg2 = (clang::clog::i64)jarg2; 
  result = ((clang::clog::ClangClog const *)arg1)->srcLocation(arg2);
  *(clang::clog::ClangClog::Loc **)&jresult = new clang::clog::ClangClog::Loc((const clang::clog::ClangClog::Loc &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_clang_swig_clogJNI_ClangClog_1type(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  clang::clog::ClangClog *arg1 = (clang::clog::ClangClog *) 0 ;
  clang::clog::i64 arg2 ;
  clang::clog::i64 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(clang::clog::ClangClog **)&jarg1; 
  arg2 = (clang::clog::i64)jarg2; 
  result = (clang::clog::i64)(arg1)->type(arg2);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_clang_swig_clogJNI_ClangClog_1decl(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  clang::clog::ClangClog *arg1 = (clang::clog::ClangClog *) 0 ;
  clang::clog::i64 arg2 ;
  clang::clog::i64 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(clang::clog::ClangClog **)&jarg1; 
  arg2 = (clang::clog::i64)jarg2; 
  result = (clang::clog::i64)(arg1)->decl(arg2);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_clang_swig_clogJNI_ClangClog_1hasGlobalStorage(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jboolean jresult = 0 ;
  clang::clog::ClangClog *arg1 = (clang::clog::ClangClog *) 0 ;
  clang::clog::i64 arg2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(clang::clog::ClangClog **)&jarg1; 
  arg2 = (clang::clog::i64)jarg2; 
  result = (bool)(arg1)->hasGlobalStorage(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_clang_swig_clogJNI_ClangClog_1parent(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  clang::clog::ClangClog *arg1 = (clang::clog::ClangClog *) 0 ;
  clang::clog::i64 arg2 ;
  clang::clog::i64 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(clang::clog::ClangClog **)&jarg1; 
  arg2 = (clang::clog::i64)jarg2; 
  result = (clang::clog::i64)(arg1)->parent(arg2);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_clang_swig_clogJNI_ClangClog_1isParent(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3) {
  jboolean jresult = 0 ;
  clang::clog::ClangClog *arg1 = (clang::clog::ClangClog *) 0 ;
  clang::clog::i64 arg2 ;
  clang::clog::i64 arg3 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(clang::clog::ClangClog **)&jarg1; 
  arg2 = (clang::clog::i64)jarg2; 
  arg3 = (clang::clog::i64)jarg3; 
  result = (bool)(arg1)->isParent(arg2,arg3);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_clang_swig_clogJNI_ClangClog_1isAncestor(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3) {
  jboolean jresult = 0 ;
  clang::clog::ClangClog *arg1 = (clang::clog::ClangClog *) 0 ;
  clang::clog::i64 arg2 ;
  clang::clog::i64 arg3 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(clang::clog::ClangClog **)&jarg1; 
  arg2 = (clang::clog::i64)jarg2; 
  arg3 = (clang::clog::i64)jarg3; 
  result = (bool)(arg1)->isAncestor(arg2,arg3);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_clang_swig_clogJNI_ClangClog_1name(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jstring jresult = 0 ;
  clang::clog::ClangClog *arg1 = (clang::clog::ClangClog *) 0 ;
  clang::clog::i64 arg2 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(clang::clog::ClangClog **)&jarg1; 
  arg2 = (clang::clog::i64)jarg2; 
  result = (arg1)->name(arg2);
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_clang_swig_clogJNI_ClangClog_1cfg(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  clang::clog::ClangClog *arg1 = (clang::clog::ClangClog *) 0 ;
  clang::clog::i64 arg2 ;
  clang::clog::i64 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(clang::clog::ClangClog **)&jarg1; 
  arg2 = (clang::clog::i64)jarg2; 
  result = (clang::clog::i64)(arg1)->cfg(arg2);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_clang_swig_clogJNI_ClangClog_1cfgSucc(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  clang::clog::ClangClog *arg1 = (clang::clog::ClangClog *) 0 ;
  clang::clog::i64 arg2 ;
  std::vector< clang::clog::i64 > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(clang::clog::ClangClog **)&jarg1; 
  arg2 = (clang::clog::i64)jarg2; 
  result = (arg1)->cfgSucc(arg2);
  *(std::vector< clang::clog::i64 > **)&jresult = new std::vector< clang::clog::i64 >((const std::vector< clang::clog::i64 > &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_clang_swig_clogJNI_ClangClog_1cfgPred(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3) {
  jlong jresult = 0 ;
  clang::clog::ClangClog *arg1 = (clang::clog::ClangClog *) 0 ;
  clang::clog::i64 arg2 ;
  clang::clog::i64 arg3 ;
  std::vector< clang::clog::i64 > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(clang::clog::ClangClog **)&jarg1; 
  arg2 = (clang::clog::i64)jarg2; 
  arg3 = (clang::clog::i64)jarg3; 
  result = (arg1)->cfgPred(arg2,arg3);
  *(std::vector< clang::clog::i64 > **)&jresult = new std::vector< clang::clog::i64 >((const std::vector< clang::clog::i64 > &)result); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_clang_swig_clogJNI_ClangClog_1dump(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jstring jresult = 0 ;
  clang::clog::ClangClog *arg1 = (clang::clog::ClangClog *) 0 ;
  clang::clog::i64 arg2 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(clang::clog::ClangClog **)&jarg1; 
  arg2 = (clang::clog::i64)jarg2; 
  result = (arg1)->dump(arg2);
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_clang_swig_clogJNI_ClangClog_1kind(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jstring jresult = 0 ;
  clang::clog::ClangClog *arg1 = (clang::clog::ClangClog *) 0 ;
  clang::clog::i64 arg2 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(clang::clog::ClangClog **)&jarg1; 
  arg2 = (clang::clog::i64)jarg2; 
  result = (arg1)->kind(arg2);
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_clang_swig_clogJNI_delete_1ClangClog(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  clang::clog::ClangClog *arg1 = (clang::clog::ClangClog *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(clang::clog::ClangClog **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_clang_swig_clogJNI_new_1ClangClogBuilder(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< std::string > *arg1 = 0 ;
  clang::clog::ClangClogBuilder *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::string > **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< std::string > const & reference is null");
    return 0;
  } 
  result = (clang::clog::ClangClogBuilder *)new clang::clog::ClangClogBuilder((std::vector< std::string > const &)*arg1);
  *(clang::clog::ClangClogBuilder **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_clang_swig_clogJNI_delete_1ClangClogBuilder(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  clang::clog::ClangClogBuilder *arg1 = (clang::clog::ClangClogBuilder *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(clang::clog::ClangClogBuilder **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_clang_swig_clogJNI_ClangClogBuilder_1build(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  clang::clog::ClangClogBuilder *arg1 = (clang::clog::ClangClogBuilder *) 0 ;
  clang::clog::ClangClog *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(clang::clog::ClangClogBuilder **)&jarg1; 
  result = (clang::clog::ClangClog *)(arg1)->build();
  *(clang::clog::ClangClog **)&jresult = result; 
  return jresult;
}


#ifdef __cplusplus
}
#endif

